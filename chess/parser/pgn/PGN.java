/* Generated By:JJTree&JavaCC: Do not edit this line. PGN.java */
package chess.parser.pgn;

import java.util.*;

public class PGN/*@bgen(jjtree)*/implements PGNTreeConstants, PGNConstants {/*@bgen(jjtree)*/
  protected static JJTPGNState jjtree = new JJTPGNState();public static void main(String args[]) {
	if (args.length !=0)
	{
	  try {
		PGN parser = new PGN(new java.io.FileInputStream(args[0]));
		SimpleNode node = parser.Start();
		node.dump("");
	  } catch (Exception e) {
	  System.out.println(e.getMessage());
	  e.printStackTrace();
	  System.out.println("Comment depth: " + token_source.commentDepth);
	  }
	}
  }  

  static final public SimpleNode Start() throws ParseException {
					  /*@bgen(jjtree) Start */
  PGN_Start jjtn000 = new PGN_Start(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
	try {
	  label_1:
	  while (true) {
		switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
		case FILE:
		case PIECE_TYPE:
		case L_BRACKET:
		case KINGSIDE_CASTLE:
		case QUEENSIDE_CASTLE:
		case DIGIT:
		case NAG:
		case GAME_RESULT:
		case QUOTES:
		case L_BRACE:
		case L_PARANTHESIS:
		case RANK:
		case CAPTURE:
		  ;
		  break;
		default:
		  jj_la1[0] = jj_gen;
		  break label_1;
		}
		Game();
	  }
	jjtree.closeNodeScope(jjtn000, true);
	jjtc000 = false;
	{if (true) return jjtn000;}
	} catch (Throwable jjte000) {
	if (jjtc000) {
	  jjtree.clearNodeScope(jjtn000);
	  jjtc000 = false;
	} else {
	  jjtree.popNode();
	}
	if (jjte000 instanceof RuntimeException) {
	  {if (true) throw (RuntimeException)jjte000;}
	}
	if (jjte000 instanceof ParseException) {
	  {if (true) throw (ParseException)jjte000;}
	}
	{if (true) throw (Error)jjte000;}
	} finally {
	if (jjtc000) {
	  jjtree.closeNodeScope(jjtn000, true);
	}
	}
	throw new Error("Missing return statement in function");
  }  

  static final public void Game() throws ParseException {
 /*@bgen(jjtree) Game */
  PGN_Game jjtn000 = new PGN_Game(JJTGAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token result = null;
	try {
	  label_2:
	  while (true) {
		switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
		case L_BRACKET:
		  ;
		  break;
		default:
		  jj_la1[1] = jj_gen;
		  break label_2;
		}
		TagPair();
	  }
	  label_3:
	  while (true) {
		switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
		case NAG:
		case L_BRACE:
		case L_PARANTHESIS:
		  ;
		  break;
		default:
		  jj_la1[2] = jj_gen;
		  break label_3;
		}
		MoveComment();
	  }
	  result = GameDescription();
	jjtree.closeNodeScope(jjtn000, true);
	jjtc000 = false;
	jjtn000.setResult(result);
	} catch (Throwable jjte000) {
	if (jjtc000) {
	  jjtree.clearNodeScope(jjtn000);
	  jjtc000 = false;
	} else {
	  jjtree.popNode();
	}
	if (jjte000 instanceof RuntimeException) {
	  {if (true) throw (RuntimeException)jjte000;}
	}
	if (jjte000 instanceof ParseException) {
	  {if (true) throw (ParseException)jjte000;}
	}
	{if (true) throw (Error)jjte000;}
	} finally {
	if (jjtc000) {
	  jjtree.closeNodeScope(jjtn000, true);
	}
	}
  }  

  static final public void TagPair() throws ParseException {
 /*@bgen(jjtree) TagPair */
  PGN_TagPair jjtn000 = new PGN_TagPair(JJTTAGPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token name=null, value=null;
	try {
	  jj_consume_token(L_BRACKET);
	  name = jj_consume_token(TAG_NAME);
	  jj_consume_token(INTAG_WHITESPACE);
	  value = jj_consume_token(QUOTED_STRING);
	  jj_consume_token(R_BRACKET);
	jjtree.closeNodeScope(jjtn000, true);
	jjtc000 = false;
	jjtn000.setName(name);
	jjtn000.setValue(value);
	} finally {
	if (jjtc000) {
	  jjtree.closeNodeScope(jjtn000, true);
	}
	}
  }  

  static final public Token GameDescription() throws ParseException {
  Token result = null;
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case FILE:
	case PIECE_TYPE:
	case KINGSIDE_CASTLE:
	case QUEENSIDE_CASTLE:
	case DIGIT:
	case RANK:
	case CAPTURE:
	  MoveSequence();
	  break;
	default:
	  jj_la1[3] = jj_gen;
	  ;
	}
	result = GameResult();
	{if (true) return result;}
	throw new Error("Missing return statement in function");
  }  

  static final public void MoveSequence() throws ParseException {
	label_4:
	while (true) {
	  Move();
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case FILE:
	  case PIECE_TYPE:
	  case KINGSIDE_CASTLE:
	  case QUEENSIDE_CASTLE:
	  case DIGIT:
	  case RANK:
	  case CAPTURE:
		;
		break;
	  default:
		jj_la1[4] = jj_gen;
		break label_4;
	  }
	}
  }  

  static final public void Move() throws ParseException {
	if (jj_2_1(2147483647)) {
	  label_5:
	  while (true) {
		jj_consume_token(DIGIT);
		switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
		case DIGIT:
		  ;
		  break;
		default:
		  jj_la1[5] = jj_gen;
		  break label_5;
		}
	  }
	  label_6:
	  while (true) {
		jj_consume_token(DOT);
		switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
		case DOT:
		  ;
		  break;
		default:
		  jj_la1[6] = jj_gen;
		  break label_6;
		}
	  }
	} else {
	  ;
	}
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case KINGSIDE_CASTLE:
	case QUEENSIDE_CASTLE:
	  Castle();
	  break;
	case FILE:
	case PIECE_TYPE:
	case RANK:
	case CAPTURE:
	  MoveDesc();
	  break;
	default:
	  jj_la1[7] = jj_gen;
	  jj_consume_token(-1);
	  throw new ParseException();
	}
	MoveAnnotations();
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case MOVESPACE:
	  jj_consume_token(MOVESPACE);
	  label_7:
	  while (true) {
		switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
		case NAG:
		case L_BRACE:
		case L_PARANTHESIS:
		  ;
		  break;
		default:
		  jj_la1[8] = jj_gen;
		  break label_7;
		}
		MoveComment();
	  }
	  break;
	case NAG:
	case L_BRACE:
	case L_PARANTHESIS:
	  label_8:
	  while (true) {
		MoveComment();
		switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
		case NAG:
		case L_BRACE:
		case L_PARANTHESIS:
		  ;
		  break;
		default:
		  jj_la1[9] = jj_gen;
		  break label_8;
		}
	  }
	  break;
	default:
	  jj_la1[10] = jj_gen;
	  jj_consume_token(-1);
	  throw new ParseException();
	}
  }  

  static final public void Castle() throws ParseException {
				 /*@bgen(jjtree) Castle */
  PGN_Castle jjtn000 = new PGN_Castle(JJTCASTLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
	try {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case KINGSIDE_CASTLE:
		jj_consume_token(KINGSIDE_CASTLE);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
					   jjtn000.setKingsideCastle();
		break;
	  case QUEENSIDE_CASTLE:
		jj_consume_token(QUEENSIDE_CASTLE);
						jjtree.closeNodeScope(jjtn000, true);
						jjtc000 = false;
					   jjtn000.setQueensideCastle();
		break;
	  default:
		jj_la1[11] = jj_gen;
		jj_consume_token(-1);
		throw new ParseException();
	  }
	} finally {
	if (jjtc000) {
	  jjtree.closeNodeScope(jjtn000, true);
	}
	}
  }  

  static final public void MoveDesc() throws ParseException {
 /*@bgen(jjtree) MoveDesc */
  PGN_MoveDesc jjtn000 = new PGN_MoveDesc(JJTMOVEDESC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token pieceType = null;
  Token clarifyingFile = null;
  Token clarifyingRank = null;
  Token file = null;
  Token rank = null;
  Token promotedPiece = null;
	try {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case PIECE_TYPE:
		pieceType = jj_consume_token(PIECE_TYPE);
		break;
	  default:
		jj_la1[12] = jj_gen;
		;
	  }
	  if (jj_2_2(2147483647)) {
		clarifyingFile = jj_consume_token(FILE);
	  } else {
		;
	  }
	  if (jj_2_3(2147483647)) {
		clarifyingRank = jj_consume_token(RANK);
	  } else {
		;
	  }
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case CAPTURE:
		jj_consume_token(CAPTURE);
			   jjtn000.setCapture(true);
		break;
	  default:
		jj_la1[13] = jj_gen;
		;
	  }
	  file = jj_consume_token(FILE);
	  rank = jj_consume_token(RANK);
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case PIECE_TYPE:
	  case EQUALS:
		promotedPiece = PawnPromotion();
		break;
	  default:
		jj_la1[14] = jj_gen;
		;
	  }
	jjtree.closeNodeScope(jjtn000, true);
	jjtc000 = false;
	jjtn000.setPieceType(pieceType);
	jjtn000.setClarifyingFile(clarifyingFile);
	jjtn000.setClarifyingRank(clarifyingRank);
	jjtn000.setFile(file);
	jjtn000.setRank(rank);
	jjtn000.setPromotedPiece(promotedPiece);
	} catch (Throwable jjte000) {
	if (jjtc000) {
	  jjtree.clearNodeScope(jjtn000);
	  jjtc000 = false;
	} else {
	  jjtree.popNode();
	}
	if (jjte000 instanceof RuntimeException) {
	  {if (true) throw (RuntimeException)jjte000;}
	}
	if (jjte000 instanceof ParseException) {
	  {if (true) throw (ParseException)jjte000;}
	}
	{if (true) throw (Error)jjte000;}
	} finally {
	if (jjtc000) {
	  jjtree.closeNodeScope(jjtn000, true);
	}
	}
  }  

  static final public void MoveAnnotations() throws ParseException {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case CHECKMATE:
	  jj_consume_token(CHECKMATE);
	  break;
	default:
	  jj_la1[15] = jj_gen;
	  ;
	}
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case CHECK:
	  jj_consume_token(CHECK);
	  break;
	default:
	  jj_la1[16] = jj_gen;
	  ;
	}
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case ANNOTATIONS:
	  jj_consume_token(ANNOTATIONS);
	  break;
	default:
	  jj_la1[17] = jj_gen;
	  ;
	}
  }  

  static final public Token PawnPromotion() throws ParseException {
  Token piece = null;
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case EQUALS:
	  jj_consume_token(EQUALS);
	  break;
	default:
	  jj_la1[18] = jj_gen;
	  ;
	}
	piece = jj_consume_token(PIECE_TYPE);
	{if (true) return piece;}
	throw new Error("Missing return statement in function");
  }  

  static final public void MoveComment() throws ParseException {
	if (jj_2_4(2)) {
	  jj_consume_token(NAG);
	  NestingComment();
	} else {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case NAG:
	  case L_BRACE:
	  case L_PARANTHESIS:
		switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
		case NAG:
		  jj_consume_token(NAG);
		  break;
		case L_BRACE:
		case L_PARANTHESIS:
		  NestingComment();
		  break;
		default:
		  jj_la1[19] = jj_gen;
		  jj_consume_token(-1);
		  throw new ParseException();
		}
		break;
	  default:
		jj_la1[20] = jj_gen;
		jj_consume_token(-1);
		throw new ParseException();
	  }
	}
  }  

  static final public void NestingComment() throws ParseException {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case L_PARANTHESIS:
	  MoveCommentParanthesis();
	  break;
	case L_BRACE:
	  MoveCommentBrace();
	  break;
	default:
	  jj_la1[21] = jj_gen;
	  jj_consume_token(-1);
	  throw new ParseException();
	}
  }  

  static final public void MoveCommentBrace() throws ParseException {
	jj_consume_token(L_BRACE);
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case COMMENT_BRACE_TEXT:
	  jj_consume_token(COMMENT_BRACE_TEXT);
	  break;
	default:
	  jj_la1[22] = jj_gen;
	  ;
	}
	label_9:
	while (true) {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case L_BRACE:
	  case L_PARANTHESIS:
		;
		break;
	  default:
		jj_la1[23] = jj_gen;
		break label_9;
	  }
	  NestingComment();
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case COMMENT_BRACE_TEXT:
		jj_consume_token(COMMENT_BRACE_TEXT);
		break;
	  default:
		jj_la1[24] = jj_gen;
		;
	  }
	}
	jj_consume_token(R_BRACE);
  }  

  static final public void MoveCommentParanthesis() throws ParseException {
	jj_consume_token(L_PARANTHESIS);
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case COMMENT_PARAN_TEXT:
	  jj_consume_token(COMMENT_PARAN_TEXT);
	  break;
	default:
	  jj_la1[25] = jj_gen;
	  ;
	}
	label_10:
	while (true) {
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case L_BRACE:
	  case L_PARANTHESIS:
		;
		break;
	  default:
		jj_la1[26] = jj_gen;
		break label_10;
	  }
	  NestingComment();
	  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	  case COMMENT_PARAN_TEXT:
		jj_consume_token(COMMENT_PARAN_TEXT);
		break;
	  default:
		jj_la1[27] = jj_gen;
		;
	  }
	}
	jj_consume_token(R_PARANTHESIS);
  }  

  static final public Token GameResult() throws ParseException {
  Token t = null;
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case GAME_RESULT:
	  t = jj_consume_token(GAME_RESULT);
	  break;
	case QUOTES:
	  jj_consume_token(QUOTES);
	  t = jj_consume_token(GAME_RESULT);
	  jj_consume_token(QUOTES);
	  break;
	default:
	  jj_la1[28] = jj_gen;
	  jj_consume_token(-1);
	  throw new ParseException();
	}
	{if (true) return t;}
	throw new Error("Missing return statement in function");
  }  

  static final private boolean jj_2_1(int xla) {
	jj_la = xla; jj_lastpos = jj_scanpos = token;
	boolean retval = !jj_3_1();
	jj_save(0, xla);
	return retval;
  }  

  static final private boolean jj_2_2(int xla) {
	jj_la = xla; jj_lastpos = jj_scanpos = token;
	boolean retval = !jj_3_2();
	jj_save(1, xla);
	return retval;
  }  

  static final private boolean jj_2_3(int xla) {
	jj_la = xla; jj_lastpos = jj_scanpos = token;
	boolean retval = !jj_3_3();
	jj_save(2, xla);
	return retval;
  }  

  static final private boolean jj_2_4(int xla) {
	jj_la = xla; jj_lastpos = jj_scanpos = token;
	boolean retval = !jj_3_4();
	jj_save(3, xla);
	return retval;
  }  

  static final private boolean jj_3R_19() {
	if (jj_scan_token(L_BRACE)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3R_13() {
	if (jj_scan_token(CAPTURE)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3R_17() {
	if (jj_3R_19()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3R_16() {
	if (jj_3R_18()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3R_15() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_16()) {
	jj_scanpos = xsp;
	if (jj_3R_17()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	} else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3R_14() {
	if (jj_scan_token(CAPTURE)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3R_12() {
	if (jj_scan_token(RANK)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3_4() {
	if (jj_scan_token(NAG)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	if (jj_3R_15()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3R_18() {
	if (jj_scan_token(L_PARANTHESIS)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3R_11() {
	if (jj_scan_token(DIGIT)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3_3() {
	if (jj_scan_token(RANK)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_14()) jj_scanpos = xsp;
	else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	if (jj_scan_token(FILE)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3_1() {
	Token xsp;
	if (jj_3R_11()) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	while (true) {
	  xsp = jj_scanpos;
	  if (jj_3R_11()) { jj_scanpos = xsp; break; }
	  if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	}
	if (jj_scan_token(DOT)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

  static final private boolean jj_3_2() {
	if (jj_scan_token(FILE)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_12()) jj_scanpos = xsp;
	else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	xsp = jj_scanpos;
	if (jj_3R_13()) jj_scanpos = xsp;
	else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	if (jj_scan_token(FILE)) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
	return false;
  }  

static private boolean jj_initialized_once = false;
  static public PGNTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static final private int[] jj_la1_0 = {0xc30437e,0x8,0x300100,0xc000076,0xc000076,0x40,0x80,0xc000036,0x300100,0x300100,0x300100,0x30,0x4,0x8000000,0x10000004,0x0,0x80000000,0x40000000,0x10000000,0x300100,0x300100,0x300000,0x400000,0x300000,0x400000,0x1000000,0x300000,0x1000000,0x4200,};
  static final private int[] jj_la1_1 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public PGN(java.io.InputStream stream) {
	if (jj_initialized_once) {
	  System.out.println("ERROR: Second call to constructor of static parser.  You must");
	  System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
	  System.out.println("       during parser generation.");
	  throw new Error();
	}
	jj_initialized_once = true;
	jj_input_stream = new SimpleCharStream(stream, 1, 1);
	token_source = new PGNTokenManager(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  

  static public void ReInit(java.io.InputStream stream) {
	jj_input_stream.ReInit(stream, 1, 1);
	token_source.ReInit(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jjtree.reset();
	jj_gen = 0;
	for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  

  public PGN(java.io.Reader stream) {
	if (jj_initialized_once) {
	  System.out.println("ERROR: Second call to constructor of static parser.  You must");
	  System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
	  System.out.println("       during parser generation.");
	  throw new Error();
	}
	jj_initialized_once = true;
	jj_input_stream = new SimpleCharStream(stream, 1, 1);
	token_source = new PGNTokenManager(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  

  static public void ReInit(java.io.Reader stream) {
	jj_input_stream.ReInit(stream, 1, 1);
	token_source.ReInit(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jjtree.reset();
	jj_gen = 0;
	for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  

  public PGN(PGNTokenManager tm) {
	if (jj_initialized_once) {
	  System.out.println("ERROR: Second call to constructor of static parser.  You must");
	  System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
	  System.out.println("       during parser generation.");
	  throw new Error();
	}
	jj_initialized_once = true;
	token_source = tm;
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  

  public void ReInit(PGNTokenManager tm) {
	token_source = tm;
	token = new Token();
	jj_ntk = -1;
	jjtree.reset();
	jj_gen = 0;
	for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }  

  static final private Token jj_consume_token(int kind) throws ParseException {
	Token oldToken;
	if ((oldToken = token).next != null) token = token.next;
	else token = token.next = token_source.getNextToken();
	jj_ntk = -1;
	if (token.kind == kind) {
	  jj_gen++;
	  if (++jj_gc > 100) {
		jj_gc = 0;
		for (int i = 0; i < jj_2_rtns.length; i++) {
		  JJCalls c = jj_2_rtns[i];
		  while (c != null) {
			if (c.gen < jj_gen) c.first = null;
			c = c.next;
		  }
		}
	  }
	  return token;
	}
	token = oldToken;
	jj_kind = kind;
	throw generateParseException();
  }  

  static final private boolean jj_scan_token(int kind) {
	if (jj_scanpos == jj_lastpos) {
	  jj_la--;
	  if (jj_scanpos.next == null) {
		jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	  } else {
		jj_lastpos = jj_scanpos = jj_scanpos.next;
	  }
	} else {
	  jj_scanpos = jj_scanpos.next;
	}
	if (jj_rescan) {
	  int i = 0; Token tok = token;
	  while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	  if (tok != null) jj_add_error_token(kind, i);
	}
	return (jj_scanpos.kind != kind);
  }  

  static final public Token getNextToken() {
	if (token.next != null) token = token.next;
	else token = token.next = token_source.getNextToken();
	jj_ntk = -1;
	jj_gen++;
	return token;
  }  

  static final public Token getToken(int index) {
	Token t = lookingAhead ? jj_scanpos : token;
	for (int i = 0; i < index; i++) {
	  if (t.next != null) t = t.next;
	  else t = t.next = token_source.getNextToken();
	}
	return t;
  }  

  static final private int jj_ntk() {
	if ((jj_nt=token.next) == null)
	  return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	else
	  return (jj_ntk = jj_nt.kind);
  }  

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	if (pos >= 100) return;
	if (pos == jj_endpos + 1) {
	  jj_lasttokens[jj_endpos++] = kind;
	} else if (jj_endpos != 0) {
	  jj_expentry = new int[jj_endpos];
	  for (int i = 0; i < jj_endpos; i++) {
		jj_expentry[i] = jj_lasttokens[i];
	  }
	  boolean exists = false;
	  for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
		int[] oldentry = (int[])(enum.nextElement());
		if (oldentry.length == jj_expentry.length) {
		  exists = true;
		  for (int i = 0; i < jj_expentry.length; i++) {
			if (oldentry[i] != jj_expentry[i]) {
			  exists = false;
			  break;
			}
		  }
		  if (exists) break;
		}
	  }
	  if (!exists) jj_expentries.addElement(jj_expentry);
	  if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	}
  }  

  static final public ParseException generateParseException() {
	jj_expentries.removeAllElements();
	boolean[] la1tokens = new boolean[34];
	for (int i = 0; i < 34; i++) {
	  la1tokens[i] = false;
	}
	if (jj_kind >= 0) {
	  la1tokens[jj_kind] = true;
	  jj_kind = -1;
	}
	for (int i = 0; i < 29; i++) {
	  if (jj_la1[i] == jj_gen) {
		for (int j = 0; j < 32; j++) {
		  if ((jj_la1_0[i] & (1<<j)) != 0) {
			la1tokens[j] = true;
		  }
		  if ((jj_la1_1[i] & (1<<j)) != 0) {
			la1tokens[32+j] = true;
		  }
		}
	  }
	}
	for (int i = 0; i < 34; i++) {
	  if (la1tokens[i]) {
		jj_expentry = new int[1];
		jj_expentry[0] = i;
		jj_expentries.addElement(jj_expentry);
	  }
	}
	jj_endpos = 0;
	jj_rescan_token();
	jj_add_error_token(0, 0);
	int[][] exptokseq = new int[jj_expentries.size()][];
	for (int i = 0; i < jj_expentries.size(); i++) {
	  exptokseq[i] = (int[])jj_expentries.elementAt(i);
	}
	return new ParseException(token, exptokseq, tokenImage);
  }  

  static final public void enable_tracing() {
  }  

  static final public void disable_tracing() {
  }  

  static final private void jj_rescan_token() {
	jj_rescan = true;
	for (int i = 0; i < 4; i++) {
	  JJCalls p = jj_2_rtns[i];
	  do {
		if (p.gen > jj_gen) {
		  jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
		  switch (i) {
			case 0: jj_3_1(); break;
			case 1: jj_3_2(); break;
			case 2: jj_3_3(); break;
			case 3: jj_3_4(); break;
		  }
		}
		p = p.next;
	  } while (p != null);
	}
	jj_rescan = false;
  }  

  static final private void jj_save(int index, int xla) {
	JJCalls p = jj_2_rtns[index];
	while (p.gen > jj_gen) {
	  if (p.next == null) { p = p.next = new JJCalls(); break; }
	  p = p.next;
	}
	p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }  

  static final class JJCalls {
	int gen;
	Token first;
	int arg;
	JJCalls next;
  }

}