/* Generated By:JJTree: Do not edit this line. PGN_MoveDesc.java */

package chess.parser.pgn;

import chess.*;public class PGN_MoveDesc extends SimpleNode {









  int pieceType = 0;
  boolean isCapture = false;
  int clarifyingRank = 0;
  int clarifyingFile = 0;
  int rank = 0;
  int file = 0;
  boolean isPromotion = false;
  int promotionPiece = 0;

  boolean isKingsideCastle = false;
  boolean isQueensideCastle = false;

  public PGN_MoveDesc(int id) {
	super(id);
  }  

  public PGN_MoveDesc(PGN p, int id) {
	super(p, id);
  }  

  public String toString()
  {
	if (isCastle())
	{
	  if (isKingsideCastle)
		return "O-O";
	  else
		return "O-O-O";
	}

	StringBuffer buf = new StringBuffer();
	if (pieceType != Piece.PAWN)
	{
	  switch (pieceType) {
	  case Piece.KNIGHT:
		buf.append('N');
		break;
	  case Piece.BISHOP:
		buf.append('B');
		break;
	  case Piece.ROOK:
		buf.append('R');
		break;
	  case Piece.QUEEN:
		buf.append('Q');
		break;
	  case Piece.KING:
		buf.append('K');
		break;
	  }
	}

	if (clarifyingFile != 0)
	  buf.append((char) (clarifyingFile + 'a' - 1));

	if (clarifyingRank != 0)
	  buf.append((char) (clarifyingRank + '0'));

	if (isCapture)
	  buf.append('x');

	buf.append((char) (file + 'a' - 1));
	buf.append((char) (rank + '0'));

	if (isPromotion)
	{
	  buf.append('=');
	  switch (promotionPiece) {
	  case Piece.KNIGHT:
		buf.append('N');
		break;
	  case Piece.BISHOP:
		buf.append('B');
		break;
	  case Piece.ROOK:
		buf.append('R');
		break;
	  case Piece.QUEEN:
		buf.append('Q');
		break;
	  }
	}

	return buf.toString();
  }    

  int lookupPiece(char c)
	throws ParseException
  {
	int piece = 0;
	switch (c) {
	case 'P':
	  piece = Piece.PAWN;
	  break;
	case 'N':
	  piece = Piece.KNIGHT;
	  break;
	case 'B':
	  piece = Piece.BISHOP;
	  break;
	case 'R':
	  piece = Piece.ROOK;
	  break;
	case 'Q':
	  piece = Piece.QUEEN;
	  break;
	case 'K':
	  piece = Piece.KING;
	  break;
	default:
	  throw new ParseException("Invalid piece type.");
	}
	return piece;
  }      

  public boolean isCastle()
  {
	return (isKingsideCastle || isQueensideCastle);
  }  

  public void setKingsideCastle()
  {
	isKingsideCastle = true;
  }  

  public void setQueensideCastle()
  {
	isQueensideCastle = true;
  }  

  public void setPieceType(Token t)
	throws ParseException
  {
	if (t == null)
	  pieceType = Piece.PAWN;
	else
	{
	  char c = t.image.charAt(0);
	  pieceType = lookupPiece(c);
	}
  }    

  public void setPromotedPiece(Token t)
	throws ParseException
  {
	if (t == null)
	{
	  promotionPiece = 0;
	  isPromotion = false;
	}
	else
	{
	  char c = t.image.charAt(0);
	  promotionPiece = lookupPiece(c);

	  if (promotionPiece == Piece.QUEEN  ||
		  promotionPiece == Piece.ROOK   ||
		  promotionPiece == Piece.BISHOP ||
		  promotionPiece == Piece.KNIGHT)
	  {
		isPromotion = true;
	  }
	  else
		throw new ParseException("Invalid pawn promotion.");
	}
  }    

  public void setClarifyingFile(Token t)
	throws ParseException
  {
	if (t == null)
	  return;

	char c = t.image.charAt(0);
	clarifyingFile = (c - 'a') + 1;
	if (clarifyingFile < 1 || clarifyingFile > 8)
	  throw new ParseException("Invalid clarifying file.");
  }  

  public void setClarifyingRank(Token t)
	throws ParseException
  {
	if (t == null)
	  return;

	char c = t.image.charAt(0);
	clarifyingRank = (c - '1') + 1;
	if (clarifyingRank < 1 || clarifyingRank > 8)
	  throw new ParseException("Invalid clarifying rank.");
  }  

  public void setFile(Token t)
	throws ParseException
  {
	if (t == null)
	  return;

	char c = t.image.charAt(0);
	file = (c - 'a') + 1;
	if (file < 1 || file > 8)
	  throw new ParseException("Invalid file.");
  }    

  public void setRank(Token t)
	throws ParseException
  {
	if (t == null)
	  return;

	char c = t.image.charAt(0);
	rank = (c - '1') + 1;
	if (rank < 1 || rank > 8)
	  throw new ParseException("Invalid rank.");
  }    

  public void setCapture(boolean capture)
  {
	isCapture = capture;
  }  
  public int getClarifyingFile() { return clarifyingFile; }    public int getClarifyingRank() { return clarifyingRank; }    public int getFile() { return file; }    public int getPieceType() { return pieceType; }    public int getPromotionPiece() { return promotionPiece; }    public int getRank() { return rank; }    public boolean isCapture() { return isCapture; }    public boolean isKingsideCastle()
  {
	return isKingsideCastle;
  }    public boolean isPromotion() { return isPromotion; }    public boolean isQueensideCastle()
  {
	return isQueensideCastle;
  }  }