/* Generated By:JJTree&JavaCC: Do not edit this line. PGNTokenManager.java */
package chess.parser.pgn;
import java.util.*;

public class PGNTokenManager implements PGNConstants
{
  /**
   *  Stack of comment scopes
   */
  static java.util.Stack commentStack = new java.util.Stack();
  static int commentDepth = 0;
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }  
private static final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
	  default :
		 return -1;
   }
}
private static final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
	  case 34:
		 return jjStopAtPos(0, 14);
	  case 40:
		 return jjStopAtPos(0, 21);
	  case 46:
		 return jjStopAtPos(0, 7);
	  case 91:
		 return jjStopAtPos(0, 3);
	  case 123:
		 return jjStopAtPos(0, 20);
	  default :
		 return jjMoveNfa_4(0, 0);
   }
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
	  jjstateSet[jjnewStateCnt++] = state;
	  jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
	  jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
	  jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 33;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
	  if (++jjround == 0x7fffffff)
		 ReInitRounds();
	  if (curChar < 64)
	  {
		 long l = 1L << curChar;
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
				  if ((0x3ff000000000000L & l) != 0L)
				  {
					 if (kind > 6)
						kind = 6;
				  }
				  else if ((0x100003600L & l) != 0L)
				  {
					 if (kind > 19)
						kind = 19;
					 jjCheckNAdd(9);
				  }
				  else if (curChar == 42)
				  {
					 if (kind > 9)
						kind = 9;
				  }
				  else if (curChar == 36)
					 jjCheckNAdd(4);
				  if (curChar == 49)
					 jjAddStates(0, 1);
				  else if (curChar == 48)
					 jjstateSet[jjnewStateCnt++] = 6;
				  break;
			   case 2:
				  if ((0x3ff000000000000L & l) != 0L && kind > 6)
					 kind = 6;
				  break;
			   case 3:
				  if (curChar == 36)
					 jjCheckNAdd(4);
				  break;
			   case 4:
				  if ((0x3ff000000000000L & l) == 0L)
					 break;
				  if (kind > 8)
					 kind = 8;
				  jjCheckNAdd(4);
				  break;
			   case 5:
				  if (curChar == 49 && kind > 9)
					 kind = 9;
				  break;
			   case 6:
				  if (curChar == 45)
					 jjstateSet[jjnewStateCnt++] = 5;
				  break;
			   case 7:
				  if (curChar == 48)
					 jjstateSet[jjnewStateCnt++] = 6;
				  break;
			   case 8:
				  if (curChar == 42)
					 kind = 9;
				  break;
			   case 9:
				  if ((0x100003600L & l) == 0L)
					 break;
				  kind = 19;
				  jjCheckNAdd(9);
				  break;
			   case 10:
				  if (curChar == 49)
					 jjAddStates(0, 1);
				  break;
			   case 11:
				  if (curChar == 48 && kind > 9)
					 kind = 9;
				  break;
			   case 12:
				  if (curChar == 45)
					 jjstateSet[jjnewStateCnt++] = 11;
				  break;
			   case 13:
				  if (curChar == 50 && kind > 9)
					 kind = 9;
				  break;
			   case 14:
				  if (curChar == 47)
					 jjstateSet[jjnewStateCnt++] = 13;
				  break;
			   case 15:
				  if (curChar == 49)
					 jjstateSet[jjnewStateCnt++] = 14;
				  break;
			   case 16:
				  if (curChar == 45)
					 jjstateSet[jjnewStateCnt++] = 15;
				  break;
			   case 17:
				  if (curChar == 50)
					 jjstateSet[jjnewStateCnt++] = 16;
				  break;
			   case 18:
				  if (curChar == 47)
					 jjstateSet[jjnewStateCnt++] = 17;
				  break;
			   case 21:
				  if (curChar == 45)
					 jjstateSet[jjnewStateCnt++] = 20;
				  break;
			   case 23:
				  if (curChar == 45)
					 jjstateSet[jjnewStateCnt++] = 22;
				  break;
			   case 25:
				  if (curChar == 45)
					 jjstateSet[jjnewStateCnt++] = 24;
				  break;
			   case 28:
				  if (curChar == 45)
					 jjstateSet[jjnewStateCnt++] = 27;
				  break;
			   case 30:
				  if (curChar == 45)
					 jjstateSet[jjnewStateCnt++] = 29;
				  break;
			   case 32:
				  if (curChar == 45)
					 jjstateSet[jjnewStateCnt++] = 31;
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  else if (curChar < 128)
	  {
		 long l = 1L << (curChar & 077);
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
				  if ((0x1fe00000000L & l) != 0L)
				  {
					 if (kind > 1)
						kind = 1;
				  }
				  else if ((0x74804L & l) != 0L)
				  {
					 if (kind > 2)
						kind = 2;
				  }
				  else if (curChar == 79)
					 jjAddStates(2, 3);
				  else if (curChar == 111)
					 jjAddStates(4, 5);
				  break;
			   case 1:
				  if ((0x74804L & l) != 0L)
					 kind = 2;
				  break;
			   case 19:
				  if (curChar == 111)
					 jjAddStates(4, 5);
				  break;
			   case 20:
				  if (curChar == 111 && kind > 4)
					 kind = 4;
				  break;
			   case 22:
				  if (curChar == 111 && kind > 5)
					 kind = 5;
				  break;
			   case 24:
				  if (curChar == 111)
					 jjstateSet[jjnewStateCnt++] = 23;
				  break;
			   case 26:
				  if (curChar == 79)
					 jjAddStates(2, 3);
				  break;
			   case 27:
				  if (curChar == 79 && kind > 4)
					 kind = 4;
				  break;
			   case 29:
				  if (curChar == 79 && kind > 5)
					 kind = 5;
				  break;
			   case 31:
				  if (curChar == 79)
					 jjstateSet[jjnewStateCnt++] = 30;
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  else
	  {
		 int i2 = (curChar & 0xff) >> 6;
		 long l2 = 1L << (curChar & 077);
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  if (kind != 0x7fffffff)
	  {
		 jjmatchedKind = kind;
		 jjmatchedPos = curPos;
		 kind = 0x7fffffff;
	  }
	  ++curPos;
	  if ((i = jjnewStateCnt) == (startsAt = 33 - (jjnewStateCnt = startsAt)))
		 return curPos;
	  try { curChar = input_stream.readChar(); }
	  catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
	  default :
		 return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
static private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
	  case 40:
		 return jjStopAtPos(0, 21);
	  case 41:
		 return jjStopAtPos(0, 25);
	  case 123:
		 return jjStopAtPos(0, 20);
	  default :
		 return jjMoveNfa_1(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
	  if (++jjround == 0x7fffffff)
		 ReInitRounds();
	  if (curChar < 64)
	  {
		 long l = 1L << curChar;
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
			   case 2:
				  if ((0xfffffcffffffffffL & l) == 0L)
					 break;
				  kind = 24;
				  jjCheckNAdd(2);
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  else if (curChar < 128)
	  {
		 long l = 1L << (curChar & 077);
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
				  if ((0xf7fffffff7ffffffL & l) != 0L)
				  {
					 if (kind > 24)
						kind = 24;
					 jjCheckNAdd(2);
				  }
				  if ((0x1fe00000000L & l) != 0L)
				  {
					 if (kind > 1)
						kind = 1;
				  }
				  else if ((0x74804L & l) != 0L)
				  {
					 if (kind > 2)
						kind = 2;
				  }
				  break;
			   case 1:
				  if ((0x74804L & l) != 0L && kind > 2)
					 kind = 2;
				  break;
			   case 2:
				  if ((0xf7fffffff7ffffffL & l) == 0L)
					 break;
				  if (kind > 24)
					 kind = 24;
				  jjCheckNAdd(2);
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  else
	  {
		 int i2 = (curChar & 0xff) >> 6;
		 long l2 = 1L << (curChar & 077);
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
			   case 2:
				  if ((jjbitVec0[i2] & l2) == 0L)
					 break;
				  if (kind > 24)
					 kind = 24;
				  jjCheckNAdd(2);
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  if (kind != 0x7fffffff)
	  {
		 jjmatchedKind = kind;
		 jjmatchedPos = curPos;
		 kind = 0x7fffffff;
	  }
	  ++curPos;
	  if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
		 return curPos;
	  try { curChar = input_stream.readChar(); }
	  catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
	  default :
		 return -1;
   }
}
private static final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
static private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
	  case 40:
		 return jjStopAtPos(0, 21);
	  case 123:
		 return jjStopAtPos(0, 20);
	  case 125:
		 return jjStopAtPos(0, 23);
	  default :
		 return jjMoveNfa_2(0, 0);
   }
}
static private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
	  if (++jjround == 0x7fffffff)
		 ReInitRounds();
	  if (curChar < 64)
	  {
		 long l = 1L << curChar;
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
			   case 2:
				  if ((0xfffffeffffffffffL & l) == 0L)
					 break;
				  kind = 22;
				  jjCheckNAdd(2);
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  else if (curChar < 128)
	  {
		 long l = 1L << (curChar & 077);
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
				  if ((0xd7fffffff7ffffffL & l) != 0L)
				  {
					 if (kind > 22)
						kind = 22;
					 jjCheckNAdd(2);
				  }
				  if ((0x1fe00000000L & l) != 0L)
				  {
					 if (kind > 1)
						kind = 1;
				  }
				  else if ((0x74804L & l) != 0L)
				  {
					 if (kind > 2)
						kind = 2;
				  }
				  break;
			   case 1:
				  if ((0x74804L & l) != 0L && kind > 2)
					 kind = 2;
				  break;
			   case 2:
				  if ((0xd7fffffff7ffffffL & l) == 0L)
					 break;
				  if (kind > 22)
					 kind = 22;
				  jjCheckNAdd(2);
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  else
	  {
		 int i2 = (curChar & 0xff) >> 6;
		 long l2 = 1L << (curChar & 077);
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
			   case 2:
				  if ((jjbitVec0[i2] & l2) == 0L)
					 break;
				  if (kind > 22)
					 kind = 22;
				  jjCheckNAdd(2);
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  if (kind != 0x7fffffff)
	  {
		 jjmatchedKind = kind;
		 jjmatchedPos = curPos;
		 kind = 0x7fffffff;
	  }
	  ++curPos;
	  if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
		 return curPos;
	  try { curChar = input_stream.readChar(); }
	  catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
	  default :
		 return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
	  case 40:
		 return jjStopAtPos(0, 21);
	  case 43:
		 return jjStartNfaWithStates_0(0, 31, 6);
	  case 61:
		 return jjStopAtPos(0, 28);
	  case 120:
		 return jjStopAtPos(0, 27);
	  case 123:
		 return jjStopAtPos(0, 20);
	  default :
		 return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
	  if (++jjround == 0x7fffffff)
		 ReInitRounds();
	  if (curChar < 64)
	  {
		 long l = 1L << curChar;
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
				  if ((0x1fe000000000000L & l) != 0L)
				  {
					 if (kind > 26)
						kind = 26;
				  }
				  else if ((0x100002600L & l) != 0L)
				  {
					 if (kind > 33)
						kind = 33;
					 jjCheckNAdd(8);
				  }
				  else if (curChar == 33)
					 jjCheckNAddTwoStates(10, 11);
				  else if (curChar == 43)
					 jjstateSet[jjnewStateCnt++] = 6;
				  else if (curChar == 35)
				  {
					 if (kind > 32)
						kind = 32;
				  }
				  else if (curChar == 63)
					 jjCheckNAddTwoStates(10, 11);
				  if ((0x8000000200000000L & l) != 0L)
				  {
					 if (kind > 30)
						kind = 30;
				  }
				  break;
			   case 2:
				  if ((0x1fe000000000000L & l) != 0L)
					 kind = 26;
				  break;
			   case 4:
				  if ((0x8000000200000000L & l) != 0L && kind > 30)
					 kind = 30;
				  break;
			   case 5:
				  if (curChar == 35)
					 kind = 32;
				  break;
			   case 6:
				  if (curChar == 43 && kind > 32)
					 kind = 32;
				  break;
			   case 7:
				  if (curChar == 43)
					 jjstateSet[jjnewStateCnt++] = 6;
				  break;
			   case 8:
				  if ((0x100002600L & l) == 0L)
					 break;
				  kind = 33;
				  jjCheckNAdd(8);
				  break;
			   case 9:
				  if (curChar == 33)
					 jjCheckNAddTwoStates(10, 11);
				  break;
			   case 10:
				  if (curChar == 63 && kind > 30)
					 kind = 30;
				  break;
			   case 11:
				  if (curChar == 33 && kind > 30)
					 kind = 30;
				  break;
			   case 12:
				  if (curChar == 63)
					 jjCheckNAddTwoStates(10, 11);
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  else if (curChar < 128)
	  {
		 long l = 1L << (curChar & 077);
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
				  if ((0x1fe00000000L & l) != 0L)
				  {
					 if (kind > 1)
						kind = 1;
				  }
				  else if ((0x74804L & l) != 0L)
				  {
					 if (kind > 2)
						kind = 2;
				  }
				  if ((0x64004L & l) != 0L)
				  {
					 if (kind > 29)
						kind = 29;
				  }
				  break;
			   case 1:
				  if ((0x74804L & l) != 0L && kind > 2)
					 kind = 2;
				  break;
			   case 3:
				  if ((0x64004L & l) != 0L && kind > 29)
					 kind = 29;
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  else
	  {
		 int i2 = (curChar & 0xff) >> 6;
		 long l2 = 1L << (curChar & 077);
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  if (kind != 0x7fffffff)
	  {
		 jjmatchedKind = kind;
		 jjmatchedPos = curPos;
		 kind = 0x7fffffff;
	  }
	  ++curPos;
	  if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
		 return curPos;
	  try { curChar = input_stream.readChar(); }
	  catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
	  default :
		 return -1;
   }
}
private static final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
static private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
	  case 40:
		 return jjStopAtPos(0, 21);
	  case 93:
		 return jjStopAtPos(0, 18);
	  case 123:
		 return jjStopAtPos(0, 20);
	  default :
		 return jjMoveNfa_3(0, 0);
   }
}
static private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
	  if (++jjround == 0x7fffffff)
		 ReInitRounds();
	  if (curChar < 64)
	  {
		 long l = 1L << curChar;
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
				  if ((0x3ff000000000000L & l) != 0L)
				  {
					 if (kind > 15)
						kind = 15;
					 jjCheckNAdd(2);
				  }
				  else if ((0x100003600L & l) != 0L)
				  {
					 if (kind > 17)
						kind = 17;
					 jjCheckNAdd(6);
				  }
				  else if (curChar == 34)
					 jjCheckNAddTwoStates(4, 5);
				  break;
			   case 2:
				  if ((0x3ff000000000000L & l) == 0L)
					 break;
				  if (kind > 15)
					 kind = 15;
				  jjCheckNAdd(2);
				  break;
			   case 3:
				  if (curChar == 34)
					 jjCheckNAddTwoStates(4, 5);
				  break;
			   case 4:
				  if ((0xfffffffbffffdbffL & l) != 0L)
					 jjCheckNAddTwoStates(4, 5);
				  break;
			   case 5:
				  if (curChar == 34 && kind > 16)
					 kind = 16;
				  break;
			   case 6:
				  if ((0x100003600L & l) == 0L)
					 break;
				  if (kind > 17)
					 kind = 17;
				  jjCheckNAdd(6);
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  else if (curChar < 128)
	  {
		 long l = 1L << (curChar & 077);
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 0:
				  if ((0x7fffffe87fffffeL & l) != 0L)
				  {
					 if (kind > 15)
						kind = 15;
					 jjCheckNAdd(2);
				  }
				  if ((0x1fe00000000L & l) != 0L)
				  {
					 if (kind > 1)
						kind = 1;
				  }
				  else if ((0x74804L & l) != 0L)
				  {
					 if (kind > 2)
						kind = 2;
				  }
				  break;
			   case 1:
				  if ((0x74804L & l) != 0L && kind > 2)
					 kind = 2;
				  break;
			   case 2:
				  if ((0x7fffffe87fffffeL & l) == 0L)
					 break;
				  if (kind > 15)
					 kind = 15;
				  jjCheckNAdd(2);
				  break;
			   case 4:
				  jjAddStates(6, 7);
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  else
	  {
		 int i2 = (curChar & 0xff) >> 6;
		 long l2 = 1L << (curChar & 077);
		 MatchLoop: do
		 {
			switch(jjstateSet[--i])
			{
			   case 4:
				  if ((jjbitVec0[i2] & l2) != 0L)
					 jjAddStates(6, 7);
				  break;
			   default : break;
			}
		 } while(i != startsAt);
	  }
	  if (kind != 0x7fffffff)
	  {
		 jjmatchedKind = kind;
		 jjmatchedPos = curPos;
		 kind = 0x7fffffff;
	  }
	  ++curPos;
	  if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
		 return curPos;
	  try { curChar = input_stream.readChar(); }
	  catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   12, 18, 28, 32, 21, 25, 4, 5, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, "\133", null, null, null, "\56", null, null, null, null, null, 
null, "\42", null, null, null, "\135", null, "\173", "\50", null, "\175", null, 
"\51", null, "\170", "\75", null, null, "\53", null, null, };
public static final String[] lexStateNames = {
   "inMove", 
   "comment_paran", 
   "comment_brace", 
   "WithinTagPair", 
   "DEFAULT", 
};
public static final int[] jjnewLexState = {
   -1, 0, 0, 3, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, 2, 1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 4, 
};
static final long[] jjtoToken = {
   0x3fff7c3ffL, 
};
static final long[] jjtoSkip = {
   0x80000L, 
};
static final long[] jjtoSpecial = {
   0x80000L, 
};
static private SimpleCharStream input_stream;
static private final int[] jjrounds = new int[33];
static private final int[] jjstateSet = new int[66];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
public PGNTokenManager(SimpleCharStream stream)
{
   if (input_stream != null)
	  throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public PGNTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 33; i-- > 0;)
	  jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
	  throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
	  curLexState = lexState;
}

static private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 4;
static int defaultLexState = 4;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
	  curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
	  jjmatchedKind = 0;
	  matchedToken = jjFillToken();
	  matchedToken.specialToken = specialToken;
	  return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
	 case 0:
	   jjmatchedKind = 0x7fffffff;
	   jjmatchedPos = 0;
	   curPos = jjMoveStringLiteralDfa0_0();
	   break;
	 case 1:
	   jjmatchedKind = 0x7fffffff;
	   jjmatchedPos = 0;
	   curPos = jjMoveStringLiteralDfa0_1();
	   break;
	 case 2:
	   jjmatchedKind = 0x7fffffff;
	   jjmatchedPos = 0;
	   curPos = jjMoveStringLiteralDfa0_2();
	   break;
	 case 3:
	   jjmatchedKind = 0x7fffffff;
	   jjmatchedPos = 0;
	   curPos = jjMoveStringLiteralDfa0_3();
	   break;
	 case 4:
	   jjmatchedKind = 0x7fffffff;
	   jjmatchedPos = 0;
	   curPos = jjMoveStringLiteralDfa0_4();
	   break;
   }
	 if (jjmatchedKind != 0x7fffffff)
	 {
		if (jjmatchedPos + 1 < curPos)
		   input_stream.backup(curPos - jjmatchedPos - 1);
		if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
		{
		   matchedToken = jjFillToken();
		   matchedToken.specialToken = specialToken;
		   TokenLexicalActions(matchedToken);
	   if (jjnewLexState[jjmatchedKind] != -1)
		 curLexState = jjnewLexState[jjmatchedKind];
		   return matchedToken;
		}
		else
		{
		   if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
		   {
			  matchedToken = jjFillToken();
			  if (specialToken == null)
				 specialToken = matchedToken;
			  else
			  {
				 matchedToken.specialToken = specialToken;
				 specialToken = (specialToken.next = matchedToken);
			  }
		   }
		 if (jjnewLexState[jjmatchedKind] != -1)
		   curLexState = jjnewLexState[jjmatchedKind];
		   continue EOFLoop;
		}
	 }
	 int error_line = input_stream.getEndLine();
	 int error_column = input_stream.getEndColumn();
	 String error_after = null;
	 boolean EOFSeen = false;
	 try { input_stream.readChar(); input_stream.backup(1); }
	 catch (java.io.IOException e1) {
		EOFSeen = true;
		error_after = curPos <= 1 ? "" : input_stream.GetImage();
		if (curChar == '\n' || curChar == '\r') {
		   error_line++;
		   error_column = 0;
		}
		else
		   error_column++;
	 }
	 if (!EOFSeen) {
		input_stream.backup(1);
		error_after = curPos <= 1 ? "" : input_stream.GetImage();
	 }
	 throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static final void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
	  case 20 :
		if (image == null)
			image = new StringBuffer(jjstrLiteralImages[20]);
		 else
			image.append(jjstrLiteralImages[20]);
	/* push the current lexical state       */
	{
	Integer commentState = new Integer(curLexState);
	commentStack.push(commentState);
	commentDepth++;
	}
		 break;
	  case 21 :
		if (image == null)
			image = new StringBuffer(jjstrLiteralImages[21]);
		 else
			image.append(jjstrLiteralImages[21]);
	/* push the current lexical state       */
	{
	Integer commentState = new Integer(curLexState);
	commentStack.push(commentState);
	commentDepth++;
	}
		 break;
	  case 23 :
		if (image == null)
			image = new StringBuffer(jjstrLiteralImages[23]);
		 else
			image.append(jjstrLiteralImages[23]);
	/* switch to the previous scope */
	if (!commentStack.empty()) {
	  Integer       commentState = (Integer) commentStack.pop();
	  int           lexValue = commentState.intValue();
	  if (lexValue == inMove)
		  lexValue = DEFAULT;
	  SwitchTo(lexValue);
	  commentDepth--;
	}
		 break;
	  case 25 :
		if (image == null)
			image = new StringBuffer(jjstrLiteralImages[25]);
		 else
			image.append(jjstrLiteralImages[25]);
	/* switch to the previous scope */
	if (!commentStack.empty()) {
	  Integer       commentState = (Integer) commentStack.pop();
	  int           lexValue = commentState.intValue();
	  if (lexValue == inMove)
		  lexValue = DEFAULT;
	  SwitchTo(lexValue);
	  commentDepth--;
	}
		 break;
	  default : 
		 break;
   }
}
}